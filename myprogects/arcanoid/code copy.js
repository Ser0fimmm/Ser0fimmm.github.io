// Atari Brakeout –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ Arcanoid –Ω–∞ JS.
// –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const canvas = document.getElementById("myCanvas"); // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–Ω–æ –∏ 2d –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–≥—Ä—ã
const ctx = canvas.getContext("2d");

const ballRadius = 10; // —Ä–∞–¥–∏—É—Å —à–∞—Ä–∞. –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å. —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞–¥–∏—É—Å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞—Ä

let x = canvas.width / 2; // —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞ –ø–∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
let y = canvas.height - 30;
let dx = 2;
let dy = -2;

let rightPressed = false; // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–∏–µ–Ω–∏–µ –Ω–∞–∑–∞—Ç–∏—è –∫–ª–∞–≤–∏—à (–Ω–µ –Ω–∞–∂–∞—Ç—ã)
let leftPressed = false;

const paddleHeight = 10; // –¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞ —Ä–∞–∫–µ—Ç–∫–∏ –∏ –µ–µ –ø–æ–∑–∏—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –ø–æ –æ—Å–∏ x
const paddleWidth = 75;
let paddleX = (canvas.width - paddleWidth) / 2;

let interval = 0;//
let score = 0;// –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞

const brickRowCount = 3; // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∏—Ä–ø–∏—á–µ–π
const brickColumnCount = 5;
const brickWidth = 75;
const brickHeight = 20;
const brickPadding = 10;
const brickOffsetTop = 30;
const brickOffsetLeft = 30;

let lives = 3; // –¥–∞–µ–º –∏–≥—Ä–æ–∫—É –∂–∏–∑–Ω–∏

document.addEventListener("keydown", keyDownHandler, false); // —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
document.addEventListener("keyup", keyUpHandler, false);
document.addEventListener("mousemove", mouseMoveHandler, false);

const bricks = [];

for (let c = 0; c < brickColumnCount; c++) {
  bricks[c] = [];
  for (let r = 0; r < brickRowCount; r++) {
    bricks[c][r] = { x: 0, y: 0, status: 1 };
  }
}

function keyDownHandler(e) { // –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à
    if (e.key === "Right" || e.key === "ArrowRight") {
      rightPressed = true;
    } else if (e.key === "Left" || e.key === "ArrowLeft") {
      leftPressed = true;
    }
  }
  
  function keyUpHandler(e) { // –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Ç–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à
    if (e.key === "Right" || e.key === "ArrowRight") {
      rightPressed = false;
    } else if (e.key === "Left" || e.key === "ArrowLeft") {
      leftPressed = false;
    }
  }

function drawBall() {// —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∏—Å—É—é—â–∞—è —à–∞—Ä–∏–∫
  ctx.beginPath();
  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
  ctx.fillStyle = "#6b6b6b";
  ctx.fill();
  ctx.closePath();
}

function drawPaddle() { // —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∏—Å—É—é—â–∞—è —Ä–æ–∫–µ—Ç–∫—É
    ctx.beginPath();
    ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
    ctx.fillStyle = "#6b6b6b";
    ctx.fill();
    ctx.closePath();
  }

function drawBricks() { //—Ñ—É–Ω–∫—Ü–∏—è, —Ä–∏—Å—É—é—â–∞—è –±–ª–æ–∫–∏
    for (let c = 0; c < brickColumnCount; c++) {
      for (let r = 0; r < brickRowCount; r++) {
        if (bricks[c][r].status === 1) {
          const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
          const brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
          bricks[c][r].x = brickX;
          bricks[c][r].y = brickY;
          ctx.beginPath();
          ctx.rect(brickX, brickY, brickWidth, brickHeight);
          ctx.fillStyle = "#6b6b6b";
          ctx.fill();
          ctx.closePath();
        }
      }
    }
  }
function collisionDetection() { // —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —à–∞—Ä–∏–∫–∞ —Å –±–ª–æ–∫–∞–º–∏
    for (let c = 0; c < brickColumnCount; c++) {
      for (let r = 0; r < brickRowCount; r++) {
        const b = bricks[c][r];
        if (b.status === 1) {
          if (
            x > b.x &&
            x < b.x + brickWidth &&
            y > b.y &&
            y < b.y + brickHeight
          ) {
            dy = -dy;
            b.status = 0;
            score++;
            if (score === brickRowCount * brickColumnCount) {
              alert("ü•≥–í—ã –ü–æ–±–µ–¥–∏–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥"); // –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–æ–±–µ–¥–µ
              document.location.reload();
              clearInterval(interval); // –Ω—É–∂–Ω–æ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            }
          }
        }
      }
    }
  }

function drawScore() { // —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∏—Å—É—é—â–∞—è —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞
    ctx.font = "16px Arial";
    ctx.fillStyle = "#6b6b6b";
    ctx.fillText(`Score: ${score}`, 8, 20);
  }
function mouseMoveHandler(e) { // —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—â–∞—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –∫ —Ä–∞–∫–µ—Ç–∫–∏
    const relativeX = e.clientX - canvas.offsetLeft;
    if (relativeX > 0 && relativeX < canvas.width) {
      paddleX = relativeX - paddleWidth / 2;
    }
  }
function drawLives() { // —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—é—â–∞—è –∂–∏–∑–Ω–∏ –∏–≥—Ä–æ–∫–∞ 
    ctx.font = "16px Arial";
    ctx.fillStyle = "#6b6b6b";
    ctx.fillText(`Lives: ${lives}`, canvas.width - 65, 20);
  }

function draw() { // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—å–µ–∫—Ç—ã –∏–≥—Ä—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawBricks();
  drawBall();
  drawPaddle();
  drawScore();
  drawLives();
  collisionDetection();


  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è –ª–∏ —à–∞—Ä–∏–∫ —Å –Ω–∏–∂–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    dx = -dx;
  }
  if (y + dy < ballRadius) {
  dy = -dy;
} else if (y + dy > canvas.height - ballRadius) { // –∏ –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Ç–æ —É–±–∞–≤–ª—è–µ–º —É –∏–≥—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏
  if (x > paddleX && x < paddleX + paddleWidth) {
    dy = -dy;
  } else {
    lives--;

if (!lives) { // –µ—Å–ª–∏ –∂–∏–∑–Ω–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –∏–≥—Ä–æ–∫–∞
  alert("üíÄ–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞üíÄ"); // –≤—ã–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
  document.location.reload();
  clearInterval(interval); // –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
} else { // –µ—Å–ª–∏ –∂–µ –∂–∏–∑–Ω–∏ –µ—â–µ –µ—Å—Ç—å, —Ç–æ —É–±–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ 1 –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
  x = canvas.width / 2;
  y = canvas.height - 30;
  dx = 2;
  dy = -2;
  paddleX = (canvas.width - paddleWidth) / 2;
};
  }
}

  x += dx;
  y += dy;

  if (rightPressed) { // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–æ–∫–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Å—Ç—Ä–µ–ª–æ–∫
    paddleX = Math.min(paddleX + 7, canvas.width - paddleWidth);
  } else if (leftPressed) {
    paddleX = Math.max(paddleX - 7, 0);
  }
}

function startGame() { // —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
  interval = setInterval(draw, 10);
}

document.getElementById("runButton").addEventListener("click", function () { // –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –∫ –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å–∞–π—Ç–µ
  startGame();
  
  this.disabled = true;
});